Program:
    grammar_patterns+=GrammarPattern 
    'start' scope_name=ScopeName '(' start_expressions+=ID [','] ')'
;

ScopeName:
    /[a-zA-Z_]+(\.[a-zA-Z_]+)*/
;

QuotedScopeName:
    '"' scopeName=ScopeName '"'
;

GrammarPattern:
    name=PatternId ':'
    statements+=PatternStatement
;

PatternId:
    /#[a-z_][a-zA-Z_]*/
;

PatternStatement:
    include=IncludeStatement | match=MatchStatement | compound=CompoundStatement |
    match_from_file=MatchFromFileStatement
;

IncludeStatement:
    'include' ':' pattern=ID
;

MatchStatement:
    'match' ':' regex=STRING 'name' ':' scope_name=QuotedScopeName
;

MatchFromFileStatement:
    'match_from_file' ':' grammar_path=STRING
;

CompoundStatement:
    'begin' ':' begin_regex=STRING 'names' ': ' begin_names+=QuotedScopeName [',']
    'end' ':' end_regex=STRING 'names' ': ' end_names+=QuotedScopeName [',']
    'name' ':' scope_name=STRING '(' statements*=PatternStatement ')'
;

Comment:
  /\/\/.*$/ | /\/\*(\*(?!\/)|[^*])*\*\//
;